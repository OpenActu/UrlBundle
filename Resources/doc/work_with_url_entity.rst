Work with URL entity
====================

You can check an URL easily as shown in the first part. Now we will see the way to manage with doctrine entity the URL's datas.

-------------------
Build an URL entity
-------------------
In order, you need to create your owns entities. Don't trouble, it's very easy !

Suppose you want use the entity MyLink as URL manager. You need to create 4 files for that :

* file YourBundle/Entity/MyLink.php

This file is the master entity who store your crawling calls

.. code-block:: php

  <?php
  namespace YourBundle\Entity;
    
  use Doctrine\ORM\Mapping as ORM;
  use OpenActu\UrlBundle\Entity\UrlAnalyzer;
  use YourBundle\Entity\MyLinkResponse;
  /**
   * MyLink
   *
   * @ORM\Table(name="my_link")
   * @ORM\Entity(repositoryClass="YourBundle\Repository\MyLinkRepository")
   */
  class LinkTest extends UrlAnalyzer{
	       
	  public function __construct()
	  {
		  $this->setResponse(new MyLinkResponse());
	  }
	  public function getResponseClass()
  	{
	   return MyLinkResponse::class;
	  }
  }

* file YourBundle/Entity/MyLinkResponse.php

This file is the master entity who store the response of the master entity. There is a separation because this specific part can require some removing processes.
 
.. code-block:: php

  <?php
  namespace MyBundle\Entity;
  
  use Doctrine\ORM\Mapping as ORM;
  use OpenActu\UrlBundle\Entity\UrlResponseAnalyzer;
  /**
   * MyLinkResponse
   *
   * @ORM\Table(name="my_link_response")
   * @ORM\Entity(repositoryClass="MyBundle\Repository\MyLinkResponseRepository")
   */
  class MyLinkResponse extends UrlResponseAnalyzer{
  }
  
* file YourBundle/Repository/MyLinkRepository.php
  
.. code-block:: php

  <?php
  namespace MyBundle\Repository;

  /**
   * MyLinkRepository
   *
   * This class was generated by the Doctrine ORM. Add your own custom
   * repository methods below.
   */
  use OpenActu\UrlBundle\Repository\UrlAnalyzerRepository;
  class MyLinkRepository extends UrlAnalyzerRepository
  {
  }
  
* file YourBundle/Repository/MyLinkResponse.php
  
.. code-block:: php

  <?php
  namespace MyBundle\Repository;

  /**
   * MyLinkResponseRepository
   *
   * This class was generated by the Doctrine ORM. Add your own custom
   * repository methods below.
   */
  class MyLinkResponseRepository extends \Doctrine\ORM\EntityRepository
  {
  }

Now, you can build the model with the command line 
  
  php bin/console doctrine:schema:update --force

---------
First use
---------

We take the example in first chapter with the adding of URL entity.
  
.. code-block:: php
  
  ...
  use MyBundle\Entity\MyLink;
  ...
  
  /**
   * in your controller with error mode at INFO
   */
  $um = $this->get('open-actu.url.manager');
  $mylink = $um->sanitize(MyLink::class,'/path/subpath/filename.txt');
  if($um->hasErrors())
  {
      foreach($um->getErrors() as $error)
      {
          echo $error->getMessage().' # '.$error->getCode();
      }
  }
  echo $mylink->getScheme(); # getting scheme field

The only changes are that we're adding a $mylink var and a "MyLink::class" as first arg in the sanitize function. This push the content of sanitize call into the MyLink entity.

------------
Extended use
------------
This is just a complete example to store automatically the URL entity. It's just done as information. The explain comes after.

Execute this and show the database after. You will see the tables "my_link" and "my_link_response" with both a new line.

.. code-block:: php

  ...
  use MyBundle\MyLink;
  ... 
  $usm= $this->container->get('open-actu.url_storage.manager');		
  $um = $this->container->get('open-actu.url.manager');
 
  // Configuration settings
  $um->changePortMode('normal');
		
  /**
   * sanitize area - first step to work	 
   */
  $link = $um->sanitize(MyLink::class,"http://www.google.fr/");
		
  # we push (this is not obligatory)
  $usm->push($link);

  if(null !== $link && !$um->hasErrors())
  {
 	/**
	 * now we can send request and receive response
	 */
	$um->send($link);

	/**
	 * we said that the link can not be updated
	 */
	$link->setAcceptUpdate(true);

	/**
	 * we can store the object in database
	 */
	$usm->push($link);
			
  }
