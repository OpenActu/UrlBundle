<?php

namespace OpenActu\UrlBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use OpenActu\UrlBundle\Model\UrlManager;
use OpenActu\UrlBundle\Entity\UrlAnalyzer;
/**
 * UrlAnalyzerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UrlAnalyzerRepository extends \Doctrine\ORM\EntityRepository
{
	public function restrict($classname)
	{
		$repo = $this->_em->getRepository('OpenActuUrlBundle:UrlCoreAnalyzer');
		$query= $repo->createQueryBuilder('a')->getQuery();
		return $query;	
	}

        /**
  	 * Obtain the URL list who must be purged
         *
 	 */
	public function getEntitiesToBePurged($delay,$unit)
	{
		switch($unit)
		{
			case UrlManager::PURGE_UNIT_SECOND:
				$str_interval='PT'.$delay.'S';
				break;
			case UrlManager::PURGE_UNIT_MINUTE:
				$str_interval='PT'.$delay.'M';
				break;
			case UrlManager::PURGE_UNIT_DAY:
				$str_interval='P'.$delay.'D';
				break;
			case UrlManager::PURGE_UNIT_HOUR:
				$str_interval='PT'.$delay.'H';
				break;
			case UrlManager::PURGE_UNIT_MONTH:
				$str_interval='P'.$delay.'M';
				break;
		}
		
		$date	= date_sub(new \DateTime(),new \DateInterval($str_interval));

		$qb = $this
			->createQueryBuilder('a')
			->where('a.createdAt <= :date')
			->andWhere('a.acceptPurgeResponse = :acceptPurgeResponse')
			->andWhere('a.response IS NOT NULL')
			->setParameter('date',$date)
			->setParameter('acceptPurgeResponse',true);
		return $qb->getQuery()->getResult();
	}	
}
